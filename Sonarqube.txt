Sonar qube

link:
https://www.crestdatasys.com/blogs/an-introduction-on-using-sonarqube/#:~:text=SonarQube%20is%20a%20Code%20Quality,be%20measured%20continually%20over%20time.

.SonarQube is a Code Quality Assurance tool that collects and analyzes source code, and provides reports for the code quality of your project.
.It combines static and dynamic analysis tools and enables quality to be measured continually over time. Everything from minor styling choices, to design errors are inspected and evaluated by SonarQube. This provides users with a rich searchable history of the code to analyze where the code is messing up and determine whether or not it is styling issues, code defeats, code duplication, lack of test coverage, or excessively complex code.
.The software will analyze source code from different aspects and drills down the code layer by layer, moving module level down to the class level, with each level producing metric values and statistics that should reveal problematic areas in the source code that needs improvement.
****************************************
Quality profile and Quality gate:
Every project has a quality profile set for each supported language. The profile defines which rules will be applied during analysis. After analysis, the quality gate takes the resulting metrics and compares them to its defined thresholds to determine if the code meets the requirements for release or merge

Quality Profiles are a core component of SonarQube, since they are where you define sets of Rules that when violated should raise issues on your codebase (example: Methods should not have a Cognitive Complexity higher than 15). Quality Profiles are defined for individual languages.

Quality Gates are the set of conditions a project must meet before it should be pushed to further environments. Quality Gates considers all of the quality metrics for a project and assigns a passed or failed designation for that project.
What are the different types of quality gates?
Gates of Quality
1) Creating a Quality Strategy.
2) Concise User Stories and Acceptance.
3) Creating Test Scenarios.
4) Pair Testing with Developers.
5) Performing Manual Verification.
6) Automated Regression Test.

A Quality Gate outputs a status (Pass, Warn, Fail)

Go to Manage Jenkins > Configure System and scroll down to the SonarQube servers section

*************************************************

plugins:
Plugins are the primary means of enhancing the functionality of a Jenkins environment to suit organization- or user-specific needs. 
A plug-in is a piece of software that adds new features or extends functionality on an existing application.
**************************************

Rolling update: Rolling release, also known as rolling update or continuous delivery, is a concept in software development of frequently delivering updates to applications. 
The rolling update strategy is a gradual process that allows you to update your k8s s/y with only a minor effect on performance and no downtime.
In this strategy, The deployments select a pod with an old programming, deactivate it, and create an updated pod to replace it. The deployments repeat this process until no outdated pods remain.

the advantage is the update is applied pod by pod so the greater s/y can remain active.

libk:https://medium.com/codex/kubernetes-deployment-rolling-updates-and-rollbacks-explained-e3efa6557368

The Rolling update uses two important parameters. They are listed below.

1. maxSurge

2. maxUnavailable

1. maxSurge => Here we assigned 25%. This ensures at most 125% of the desired number of Pods are up and running. 
Assume we have four Pods. So the 25% is equal to one Pod. This ensures 5 Pods are up and running if the traffic increases.
only a certain  number of pods created above the desired number of pods

2. maxUnavailable => Here we assigned 25%. This ensures at most 75% of the desired number of Pods are up and running. 
Assume we have four Pods. So the 25% is equal to one Pod. This ensures a minimum of three Pods are up and running always.
only certain number of pods are  unavailable during an update

both values can be desired no or percenrtage of desired pods

ex:max number of pods available: replica + max surge 4+1 =5
min: replica - max unavailable 4-1=3
i.e minimum 3 pods will be running during an update.

*************************************************************************
Rollout: The ability to deploy lates minor version (bugfix, hotfix, minor feature, enhancement) without downtime. Rollback: The ability to restore back the older working version in case something goes wrong.

***************************************************************************
Recreate: aLl the pods are killed all at once and replaced all at once with the new ones
********************************************
Edge location:Edge Location is the Data Center used to deliver content fast to your users. It is the site that is nearest your users.
CloudFront delivers your content through a worldwide network of data centers called edge locations. When a user requests content that you're serving with CloudFront, the request is routed to the edge location that provides the lowest latency (time delay), so that content is delivered with the best possible performance.


What is the difference between CDN and edge location?
The content delivery network has been around for a long time and is really just an early version of edge computing. The main difference is that a CDN focuses on transmitting cached data, while edge computing supports many other types of computing like live streaming, gaming, and AI
***********************************************************

A Docker registry is a system for versioning, storing and distributing Docker images. DockerHub is a hosted registry used by default when installing the Docker engine, but there are other hosted registries available for public use such as AWS and Google's own registries.

 a registry is a collection of repositories, while repositories hold a collection of related images.
************************************
Stateful Applications 
    - User session data is saved on the server side.
    - if the server goes down, it is difficult to transfer the session data to another server. 
    - This type of application will not work, if we want to implement autoscaling.
    - Stateful applications are suitable for scenarios where data persistence and strong consistency are vital, such as databases, financial applications, Auth Gateways, and ERP systems.


Stateless Applications
    - user session data is never saved on the server side.
    - using a common authentication gateway/client token method to validate the users once for multiple microservices.    

Monolithic and Microservice architecture

    Monolithic architecture
        - A monolithic application has a single code base with multiple modules in it.
        - It is a single build for the entire application.
        - To make minor changes to an application, we need to rebuild and re-deploy the complete application.
        - scaling is very challenging.

    Microservice architecture 
        - A microservice application is composed of small (micro) services. 
        - Each service will have a different code base.
        - Applications are divided into as small as possible sub-applications called services which are independent of each other and are called loosely coupled.    
        - Each service can be managed separately and it is deployable separately.
        - Services need not to share the same technology stack or frameworks.
